{
    // We start this language server when we open java files.
    "selector": "source.java",
    // Declares what URI schemes this server attaches to.
    "schemes": [
        // regular files on disk
        "file",
        // opened by a DAP-compatible debugger
        "jdt"
    ],
    // The startup command.
    "command": [
        "${java_executable}",
        "--add-modules=ALL-SYSTEM",
        "--add-opens",
        "java.base/java.util=ALL-UNNAMED",
        "--add-opens",
        "java.base/java.lang=ALL-UNNAMED",
        "--add-opens",
        "java.base/sun.nio.fs=ALL-UNNAMED",
        "-Declipse.application=org.eclipse.jdt.ls.core.id1",
        "-Dosgi.bundles.defaultStartLevel=4",
        "-Declipse.product=org.eclipse.jdt.ls.core.product",
        "-Dfile.encoding=UTF-8",
        "-DwatchParentProcess=${watch_parent_process}",
        "-noverify",
        "-XX:+UseParallelGC",
        "-XX:GCTimeRatio=4",
        "-XX:AdaptiveSizePolicyWeight=90",
        "-Dsun.zip.disableMemoryMapping=true",
        "-Xmx1G",
        "-Xms100m",
        "-jar",
        "${serverdir}/plugins/org.eclipse.equinox.launcher_${launcher_version}.jar",
        "-configuration",
        "${serverdir}/config_${jdtls_platform}",
        "-data",
        "${datadir}"
    ],
    "initializationOptions": {},
    // Overwrite the jdtls version. An empty string uses the latest release that was tested by the LSP-jdtls developers. 
    // Must be formatted like "1.27.1" matching https://download.eclipse.org/jdtls/milestones/.
    // Restart sublime after changing this setting
    "version": "",
    // Removes test runner related lines from stacktraces.
    // This results in shorter and cleaner stacktraces but may not be desired when
    // working with or developing custom test frameworks.
    "test.filterStacktrace": true,
    // The server-specific settings.
    "settings": {
        // Specifies the folder path to the JDK (21 or more recent) used to launch the Java Language Server.
        "java.jdt.ls.java.home": null,
        // Enable/disable the 'auto build'
        "java.autobuild.enabled": true,
        // Generate method comments when generating the methods.
        "java.codeGeneration.generateComments": false,
        // Use 'instanceof' to compare types when generating the hashCode and equals
        // methods.
        "java.codeGeneration.hashCodeEquals.useInstanceof": false,
        // Use Objects.hash and Objects.equals when generating the hashCode and
        // equals methods. This setting only applies to Java 7 and higher.
        "java.codeGeneration.hashCodeEquals.useJava7Objects": false,
        // The code style for generating the toString method.
        // possible values: STRING_CONCATENATION, STRING_BUILDER, STRING_BUILDER_CHAINED, STRING_FORMAT
        "java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",
        // Limit number of items in arrays/collections/maps to list, if 0 then list
        // all.
        "java.codeGeneration.toString.limitElements": 0,
        // List contents of arrays instead of using native toString().
        "java.codeGeneration.toString.listArrayContents": true,
        // Skip null values when generating the toString method.
        "java.codeGeneration.toString.skipNullValues": false,
        // The template for generating the toString method.
        "java.codeGeneration.toString.template": "\\${object.className} [\\${member.name()}=\\${member.value}, \\${otherMembers}]",
        // Use blocks in 'if' statements when generating the methods.
        "java.codeGeneration.useBlocks": false,
        // pecifies the insertion location of the code generated by source actions.
        "java.codeGeneration.insertionLocation": "afterCursor",
        // Enable/disable code completion support
        "java.completion.enabled": true,
        // Defines a list of static members or types with static members. Content
        // assist will propose those static members even if the import is missing.
        "java.completion.favoriteStaticMembers": [
            "org.junit.Assert.*",
            "org.junit.Assume.*",
            "org.junit.jupiter.api.Assertions.*",
            "org.junit.jupiter.api.Assumptions.*",
            "org.junit.jupiter.api.DynamicContainer.*",
            "org.junit.jupiter.api.DynamicTest.*",
            "org.mockito.Mockito.*",
            "org.mockito.ArgumentMatchers.*",
            "org.mockito.Answers.*"
        ],
        // Defines the type filters. All types whose fully qualified name matches
        // the selected filter strings will be ignored in content assist or quick
        // fix proposals and when organizing imports. For example 'java.awt.*' will
        // hide all types from the awt packages.
        "java.completion.filteredTypes": [
            "java.awt.*",
            "com.sun.*",
            "sun.*",
            "jdk.*",
            "org.graalvm.*",
            "io.micrometer.shaded.*"
        ],
        // When set to true, method arguments are guessed when a method is selected
        // from as list of code assist proposals.
        "java.completion.guessMethodArguments": false,
        // Defines the sorting order of import statements. A package or type name
        // prefix (e.g. 'org.eclipse') is a valid entry. An import is always added
        // to the most specific group.
        "java.completion.importOrder": [
            "#",
            "java",
            "javax",
            "org",
            "com"
        ],
        // unknown setting
        "java.completion.maxResults": 0,
        // Enable/disable postfix completion support.
        "java.completion.postfix.enabled": true,
        // Path to Maven's global settings.xml
        "java.configuration.maven.globalSettings": null,
        // Path to Maven's user settings.xml
        "java.configuration.maven.userSettings": null,
        // Map Java Execution Environments to local JDKs.
        "java.configuration.runtimes": [],
        // Specifies how modifications on build files update the Java
        // classpath/configuration
        // possible values: disabled, interactive, automatic
        "java.configuration.updateBuildConfiguration": "automatic",
        // Preferred content provider (a 3rd party decompiler id, usually)
        "java.contentProvider.preferred": null,
        // Specifies the severity of the message when the classpath is incomplete
        // for a Java file
        // possible values: ignore, info, warning, error
        "java.errors.incompleteClasspath.severity": "warning",
        // Enable/disable smart folding range support. If disabled, it will use the
        // default indentation-based folding range provided by VS Code.
        "java.foldingRange.enabled": false,
        // Includes the comments during code formatting.
        "java.format.comments.enabled": true,
        // Enable/disable default Java formatter
        "java.format.enabled": true,
        // Enable/disable automatic block formatting when typing `;`, `<enter>` or
        // `}`
        "java.format.onType.enabled": false,
        // Optional formatter profile name from the Eclipse formatter settings.
        "java.format.settings.profile": null,
        // unknown setting
        "java.format.settings.url": null,
        // Enable/disable the implementations code lens.
        "java.implementationsCodeLens.enabled": false,
        // The number of days (if enabled) to keep unused workspace cache data.
        // Beyond this limit, cached workspace data may be removed.
        "java.configuration.workspaceCacheLimit": 99,
        // Configure glob patterns for excluding folders. Use `!` to negate patterns
        // to allow subfolders imports. You have to include a parent directory. The
        // order is important.
        "java.import.exclusions": [
            "**/node_modules/**",
            "**/.metadata/**",
            "**/archetype-resources/**",
            "**/META-INF/maven/**"
        ],
        "java.import.maven.enabled": true,
        // Enable/disable the Maven offline mode.
        "java.import.maven.offline.enabled": false,
        // Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
        // Arguments to pass to Gradle.
        // Enable/disable the Gradle importer.
        "java.import.gradle.enabled": true,
        "java.import.gradle.arguments": null,
        // Use Gradle from the specified local installation directory or GRADLE_HOME
        // if the Gradle wrapper is missing or disabled and no
        // 'java.import.gradle.version' is specified.
        "java.import.gradle.home": null,
        // The location to the JVM used to run the Gradle daemon.
        "java.import.gradle.java.home": null,
        // JVM arguments to pass to Gradle.
        "java.import.gradle.jvmArguments": null,
        // Enable/disable the Gradle offline mode.
        "java.import.gradle.offline.enabled": false,
        // Setting for GRADLE_USER_HOME.
        "java.import.gradle.user.home": null,
        // Use Gradle from the specific version if the Gradle wrapper is missing or
        // disabled.
        "java.import.gradle.version": null,
        // Use Gradle from the 'gradle-wrapper.properties' file.
        "java.import.gradle.wrapper.enabled": true,
        // Enable/disable the Maven importer.
        "java.imports.gradle.wrapper.checksums": [],
        // Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT.
        "java.import.gradle.annotationProcessing.enabled": true,
        // Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root.
        "java.import.generatesMetadataFilesAtProjectRoot": false,
        // Enable/disable eager download of Maven source artifacts.
        "java.maven.downloadSources": false,
        // Enable/disable download of Maven source artifacts for Eclipse projects.
        "java.eclipse.downloadSources": false,
        // Force update of Snapshots/Releases.
        "java.maven.updateSnapshots": false,
        // Max simultaneous project builds
        "java.maxConcurrentBuilds": 1,
        // [Experimental] Enable/disable progress reports from background processes
        // on the server.
        // This can make the status bar move a lot.
        "java.progressReports.enabled": false,
        // Enable/disable the server-mode switch information, when Java projects
        // import is skipped on startup.
        "java.project.importHint": true,
        // A relative path to the workspace where stores the compiled output.
        "java.project.outputPath": null,
        // Relative paths to the workspace where stores the source files.
        "java.project.sourcePaths": null,
        // Specifies whether to import the Java projects, when opening the folder in
        // Hybrid mode for the first time.
        // possible values: disabled, interactive, automatic
        "java.project.importOnFirstTimeStartup": "automatic",
        // Configure glob patterns for referencing local libraries to a Java
        // project.
        "java.project.referencedLibraries": [
            "lib/**/*.jar"
        ],
        // Excludes files and folders from being refreshed by the Java Language
        // Server, which can improve the overall performance. For example,
        // ["node_modules",".git"] will exclude all files and folders named
        // 'node_modules' or '.git'. Defaults to ["node_modules",".git"].
        "java.project.resourceFilters": [
            "node_modules",
            ".git"
        ],
        // Include getter, setter and builder/constructor when finding references.
        "java.references.includeAccessors": true,
        // Include the decompiled sources when finding references.
        "java.references.includeDecompiledSources": true,
        // Enable/disable the references code lens.
        "java.referencesCodeLens.enabled": false,
        // Enable/disable auto organize imports on save action
        "java.saveActions.organizeImports": false,
        // Enable/disable Smart Selection support for Java. Disabling this option
        // will not affect the VS Code built-in word-based and bracket-based smart
        // selection.
        "java.selectionRange.enabled": true,
        // The launch mode for the Java extension
        // possible values: Standard, LightWeight, Hybrid
        "java.server.launchMode": "Hybrid",
        // Automatically show build status on startup.
        "java.showBuildStatusOnStart.enabled": "notification",
        // Enable/disable the signature help.
        "java.signatureHelp.enabled": true,
        // Enable/disable to show the description in signature help.
        "java.signatureHelp.description.enabled": false,
        // Specifies the number of imports added before a star-import declaration is
        // used.
        "java.sources.organizeImports.starThreshold": 99,
        // Specifies the number of static imports added before a star-import
        // declaration is used.
        "java.sources.organizeImports.staticStarThreshold": 99,
        // unknown setting
        "java.templates.fileHeader": [],
        // unknown setting
        "java.templates.typeComment": [],
        // Enable/disable lazy loading the content in type hierarchy.
        "java.typeHierarchy.lazyLoad": false,
        // Traces the communication between VS Code and the Java language server.
        // possible values: off, messages, verbose
        "java.trace.server": "off",
        // pecifies the url or file path to the workspace Java settings.
        "java.settings.url": null,
        // Include method declarations from source files in symbol search.
        "java.symbols.includeSourceMethodDeclarations": false,
        // Show quickfixes at the problem or line level.
        "java.quickfix.showAt": "line",
        // Enable/disable inlay hints for parameter names
        "java.inlayHints.parameterNames.enabled": "literals",
        // The patterns for the methods that will be disabled to show the inlay hints.
        "java.inlayHints.parameterNames.exclusions": [],
        // Project encoding settings
        "java.project.encoding": "ignore",
        // Whether to load lombok processors from project classpath
        "java.jdt.ls.lombokSupport.enabled": true,
        // Specify whether to automatically add Protobuf output source directories to the classpath.
        "java.jdt.ls.protobufSupport.enabled": true,
        // [Experimental] Enables android project import.
        "java.jdt.ls.androidSupport.enabled": true,
        // Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order.
        // This setting prevents this from occurring.
        "java.codeAction.sortMembers.avoidVolatileChanges": true,
        "java.compile.nullAnalysis.nonnull": [
            "javax.annotation.Nonnull",
            "org.eclipse.jdt.annotation.NonNull",
            "org.springframework.lang.NonNull"
        ],
        "java.compile.nullAnalysis.nullable": [
            "javax.annotation.Nullable",
            "org.eclipse.jdt.annotation.Nullable",
            "org.springframework.lang.Nullable"
        ],
        "java.compile.nullAnalysis.mode": "automatic",
        "java.cleanup.actionsOnSave": []
    }
}
